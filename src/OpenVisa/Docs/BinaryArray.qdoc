/*!
    \class      OpenVisa::BinaryArray
    \brief      Visa返回二进制数组时，使用该类进行解析.
                该类型可用于长期保存，访问其中数字时没有额外的开销，只有在转换为vector时，会产生内存复制.
    \ingroup    openvisa
    \inmodule   InstrumentDrivers
    \inheaderfile BinaryArray.h
*/

/*!
    \fn         template <typename T> OpenVisa::BinaryArray<T>::BinaryArray(std::string&& buffer)
    \brief      从 \a buffer 构造一个二进制数组解析器，并接管 \a buffer 的生命周期.
*/

/*!
    \fn         template <typename T> OpenVisa::BinaryArray<T>::BinaryArray(BinraryArray&& other)
    \brief      移动构造函数.
*/

/*!
    \fn         template <typename T> std::size_t OpenVisa::BinaryArray<T>::size() const
    \brief      返回数据点个数.
*/

/*!
    \fn         template <typename T> const OpenVisa::BinaryArray<T>::Type* OpenVisa::BinaryArray<T>::data() const
    \brief      返回数据地址.
*/

/*!
    \fn         template <typename T> OpenVisa::BinaryArray<T>::Iterator OpenVisa::BinaryArray<T>::begin() const
    \brief      返回起始迭代器.
*/

/*!
    \fn         template <typename T> OpenVisa::BinaryArray<T>::Iterator OpenVisa::BinaryArray<T>::end() const
    \brief      返回终止迭代器.
*/

/*!
    \fn         template <typename T> bool OpenVisa::BinaryArray<T>::empty() const
    \brief      返回容器是否为空.
*/

/*!
    \fn         template <typename T> OpenVisa::BinaryArray<T>::operator std::vector<Type>() const
    \brief      隐式转换为vector，转换时将分配内存.
*/
